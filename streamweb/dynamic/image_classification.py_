import streamlit as st
import datetime
import pytz
from utils.metrics import log_runtime
from fastai.vision.all import load_learner

short_title = "fastai Image Classification"
long_title = "Image Classification with fastai and PyTorch"
key = 2
content_date = datetime.datetime(2021, 7, 22).astimezone(pytz.timezone("US/Eastern"))
model_dir = "./assets/"


@log_runtime
def render(location: st):
    location.markdown(f"## [{long_title}](/?content={key})")
    location.write(f"*{content_date.strftime('%m.%d.%Y')}*")

    location.markdown(
        "Fastai makes transfer learning easy. The main idea behind transfer learning is to use a pre-trained model to "        
        "train a new, more specific model. The new model leverages the strengths of the pre-trained model and fine-tunes it for a specific "
        "task. In some cases, pre-trained models have been trained for hundreds or thousands of hours on very large data sets. In "
        "computer vison, pre-trained models excel at detecting basic image features such as gradients, edges and colors. "
        "Transfer learning allows you to save time and money by customizing a pre-trained model to solve your specific problem."
    )  

    location.markdown(
        "In this post, based on [Chapter 2 of the fastai book](https://colab.research.google.com/github/fastai/fastbook/blob/master/02_production.ipynb) "
        ", we'll use a pre-trained model to classify woodpeckers. If you're planning to train your model locally, check out [this article](http://localhost:8502/?content=2) "
        "to set up your GPU inside a Docker container."
    )
    location.markdown("### Labelled Images")
    location.markdown(
        "First we need to gather labelled woodpecker images for training the model. I had good luck using the Python package [bing-image-downloader](https://pypi.org/project/bing-image-downloader/) to "
        "find images on Bing and save them locally. A word of caution - you'll need to review each image and make sure it's appropriate. You may find that some of the downloaded images "
        "aren't useful. For example, my search for *pileated woodpecker* returned a number of cartoon woodpeckers, paintings, t-shirts, statues and other likenesses of "
        "pileated woodpeckers that aren't relevant for identifying actual birds in images. Other images were simply labelled incorrectly and needed to be removed from the data set."
    )

    location.markdown(
        "Luckily, you don't need thousands of labelled images to get decent results. I found that about 75 images "
        "of each woodpecker type produced good results."
    )

    location.code(
"""
from bing_image_downloader import downloader
downloader.download("pileated woodpecker", limit=150,  output_dir='images', adult_filter_off=True, force_replace=False, timeout=60, verbose=True)
downloader.download("red bellied woodpecker", limit=150,  output_dir='images', adult_filter_off=True, force_replace=False, timeout=60, verbose=True)
"""
    )

    c1, c2 = location.beta_columns(2)
    c1.image(model_dir + 'pileated woodpecker/Image_145.jpg', width=200)
    c1.markdown("**Pileated Woodpecker**")
    c2.image(model_dir + 'red bellied woodpecker/Image_143.jpg', width=200)
    c2.markdown("**Red-bellied Woodpecker**")

    location.markdown(
        "bing-image-downloader places images in a directory with the same name as the search term. This works well since fastai provides a `DataBlock` "
        "object for loading images and labels from a directory structure in which the parent directory name is the image label. "
    )

    location.markdown("### DataBlock, Dataset, DataLoader and DataLoaders Images")

    location.markdown(
        "fastai has several APIs that work with and extend PyTorch types. A PyTorch `Dataset` is a collection of tuples containing data (images, in this case) and labels. "
        "One item from a `Dataset` might be a tuple `(<PIL.Image.Image image mode=L size=28x28 at 0x7F5DD45019E8>, 9)` that contains a PIL image and the class label 9. "
        "A PyTorch `DataLoader` wraps a `Dataset` and allows you to easily access batches of images and labels. It also supports shuffling batches after each iteration through the `Dataset`."        
    )

    location.markdown(
        "We could create a `DataLoader` by hand but fastai provides a `DataBlock` API to simplify the creation of the `DataLoader`. To use the `DataBlock` API, "
        "create a `DataBlock` object, passing it a number of parameters that specify the `DataBlock`'s behavior. A few examples are noted below. "
    )

    location.code(
"""
woodpeckers = DataBlock(
    blocks=(ImageBlock, CategoryBlock), # A tuple specifying the type of independent data and dependent data 
    get_items=get_image_files, # A function that can load the data - get_image_files is a fastai function that loads all images in a given path
    splitter=RandomSplitter(valid_pct=.2, seed=42), # A class that splits the data into a training and validation set
    get_y=parent_label, # A function that gets the dependent variable - parent_label labels each image with its parent folder name
    item_tfms=Resize(128), # Transforms to apply to the data - since downloaded images are different sizes, resize them
)

# Now, create the DataLoaders
woodpeckers_dataloaders = woodpeckers.dataloaders(path)
"""        
    )

    location.markdown(
        "Calling `.dataloaders(path)` on the `DataBlock` returns a fastai `DataLoaders` object. A `DataLoaders` wraps a `DataLoader` and splits the  "
        "data into a training data set and a validation data set. fastai uses `DataLoaders` for many API calls for data augmentation and "
        "model training. "
    )

    location.markdown(
        "The diagram below shows how the Dataset, DataLoader and DataLoaders objects are related to one another."
    )

    location.image('./assets/data_apis.png', caption='Dataset, DataLoader and DataLoaders Objects', width=None, use_column_width=None, clamp=False, channels='RGB', output_format='auto')

    location.markdown("### Image Augmentation")
    
    location.markdown("### Transfer Learning")
    
    location.markdown("### Results")

    #
    # RESNET 18
    # Bing Image downloader
    # CNN Learner
    # 

    #from bing_image_downloader import downloader
    #downloader.download("pileated woodpecker", limit=1,  output_dir='assets', adult_filter_off=False, force_replace=False, timeout=60, verbose=False)
    #downloader.download("red bellied woodpecker", limit=1,  output_dir='assets', adult_filter_off=False, force_replace=False, timeout=60, verbose=False)

    learn_inf = load_learner(model_dir + 'woodpecker_fastai.pkl')

    location.image(model_dir + 'pileated woodpecker/Image_1.jpg', width=100)
    st.write(learn_inf.predict(model_dir + 'pileated woodpecker/Image_1.jpg')[0])

    location.image(model_dir + 'red bellied woodpecker/Image_1.jpg', width=100)
    st.write(learn_inf.predict(model_dir + 'red bellied woodpecker/Image_1.jpg')[0])

    location.markdown(
        "Thanks for reading."
    )

    location.markdown("### Resources")

    location.write(
        """
    * [fastai Course](https://course.fast.ai/)
    * [Deep Residual Learning for Image Recognition](https://arxiv.org/abs/1512.03385)
    * https://app.diagrams.net/

"""
    )
